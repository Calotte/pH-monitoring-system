###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         28/Jul/2014  07:06:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\Source\SampleApp.c       #
#    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\To #
#                          ols\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ             #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\To #
#                          ols\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO           #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\Source\SampleApp.c" -D            #
#                          BUILD_ALL_DEVICES -D HOLD_AUTO_START -D            #
#                          LCD_SUPPORTED -D HAL_UART=FALSE -lC "C:\Texas      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\DemoEB\List\" -lA        #
#                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\DemoEB\List\"  #
#                          --diag_suppress Pe001,Pa010 -o "C:\Texas           #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\DemoEB\Obj\" -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\" -I        #
#                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\Source\"    #
#                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZM #
#                          ain\TI2530DB\" -I "C:\Texas                        #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\hal\include\" -I "C:\Texas                       #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\hal\target\CC2530EB\" -I "C:\Texas               #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\include\" -I "C:\Texas                       #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\high_level\" -I "C:\Texas                    #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\" -I "C:\Texas               #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\single_chip\" -I "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mt\" -I "C:\Texas Instruments\ZStack-CC2530-2.5. #
#                          1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\Components\osal\include\" -I "C:\Texas  #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\services\saddr\" -I "C:\Texas                    #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\services\sdata\" -I "C:\Texas                    #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\af\" -I "C:\Texas                          #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\nwk\" -I "C:\Texas                         #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sapi\" -I "C:\Texas                        #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sec\" -I "C:\Texas                         #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sys\" -I "C:\Texas                         #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\zdo\" -I "C:\Texas                         #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\" -I "C:\Texas Instruments\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\zmac\f8w\" -Ohz            #
#                          --require_prototypes                               #
#    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\DemoEB\List\Sam #
#                          pleApp.lst                                         #
#    Object file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\DemoEB\Obj\Samp #
#                          leApp.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          
      2          #include "OSAL.h"
      3          #include "ZGlobals.h"
      4          #include "AF.h"
      5          #include "aps_groups.h"
      6          #include "ZDApp.h"
      7          
      8          #include "SampleApp.h"
      9          #include "SampleAppHw.h"
     10          
     11          #include "OnBoard.h"
     12          
     13          /* HAL */
     14          #include "hal_lcd.h"
     15          #include "hal_led.h"
     16          #include "hal_key.h"
     17          #include"ds18b20.h"
     18          
     19          /*********************************************************************
     20           * MACROS
     21           */
     22          
     23          /*********************************************************************
     24           * CONSTANTS
     25           */
     26          
     27          /*********************************************************************
     28           * TYPEDEFS
     29           */
     30          
     31          /*********************************************************************
     32           * GLOBAL VARIABLES
     33           */
     34          
     35          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     36          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     37          {
     38            SAMPLEAPP_PERIODIC_CLUSTERID,
     39            SAMPLEAPP_FLASH_CLUSTERID
     40          };
     41          

   \                                 In  segment XDATA_ROM_C, align 1
     42          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     43          {
     44            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     45            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     46            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     47            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     48            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     49            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     50            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     51            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     52            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     53          };
     54          
     55          // This is the Endpoint/Interface description.  It is defined here, but
     56          // filled-in in SampleApp_Init().  Another way to go would be to fill
     57          // in the structure here and make it a "const" (in code space).  The
     58          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     59          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     60          
     61          /*********************************************************************
     62           * EXTERNAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * EXTERNAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73                                    // This variable will be received when
     74                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     76          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     78          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     81          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     83          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          
     87          /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
     91          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     92          void SampleApp_SendPeriodicMessage( void );
     93          void SampleApp_SendFlashMessage( uint16 flashTime );
     94          
     95          /*********************************************************************
     96           * NETWORK LAYER CALLBACKS
     97           */
     98          
     99          /*********************************************************************
    100           * PUBLIC FUNCTIONS
    101           */
    102          
    103          /*********************************************************************
    104           * @fn      SampleApp_Init
    105           *
    106           * @brief   Initialization function for the Generic App Task.
    107           *          This is called during initialization and should contain
    108           *          any application specific initialization (ie. hardware
    109           *          initialization/setup, table initialization, power up
    110           *          notificaiton ... ).
    111           *
    112           * @param   task_id - the ID assigned by OSAL.  This ID should be
    113           *                    used to send messages and set timers.
    114           *
    115           * @return  none
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    118          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    119            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    120            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    121            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    122          
    123            // Device hardware initialization can be added here or in main() (Zmain.c).
    124            // If the hardware is application specific - add it here.
    125            // If the hardware is other parts of the device add it in main().
    126          
    127           #if defined ( BUILD_ALL_DEVICES )
    128            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    129            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    130            // together - if they are - we will start up a coordinator. Otherwise,
    131            // the device will start as a router.
    132            if ( readCoordinatorJumper() )
   \   000015                ; Setup parameters for call to function readCoordinatorJumper
   \   000015   12....       LCALL   ??readCoordinatorJumper?relay
   \   000018   E9           MOV     A,R1
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   6003         JZ      ??SampleApp_Init_0
    133              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
   \   00001E   E4           CLR     A
   \   00001F   8002         SJMP    ??SampleApp_Init_1
    134            else
    135              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
   \                     ??SampleApp_Init_0:
   \   000021   7401         MOV     A,#0x1
   \                     ??SampleApp_Init_1:
   \   000023   F0           MOVX    @DPTR,A
    136          #endif // BUILD_ALL_DEVICES
    137          
    138          #if defined ( HOLD_AUTO_START )
    139            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    140            //  from starting the device and wait for the application to
    141            //  start the device.
    142            ZDOInitDevice(0);
   \   000024                ; Setup parameters for call to function ZDOInitDevice
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   ??ZDOInitDevice?relay
    143          #endif
    144          
    145            // Setup for the periodic message's destination address
    146            // Broadcast to everyone
    147            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
    148            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000031   A3           INC     DPTR
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    149            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000035   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    150          
    151            // Setup for the flash command's destination address - Group 1
    152            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    153            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   A3           INC     DPTR
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    154            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000047   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    155          
    156            // Fill out the endpoint description.
    157            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000050   90....       MOV     DPTR,#SampleApp_epDesc
   \   000053   7414         MOV     A,#0x14
   \   000055   F0           MOVX    @DPTR,A
    158            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005D   F0           MOVX    @DPTR,A
    159            SampleApp_epDesc.simpleDesc
    160                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000065   F0           MOVX    @DPTR,A
    161            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000066   A3           INC     DPTR
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
    162          
    163            // Register the endpoint description with the AF
    164            afRegister( &SampleApp_epDesc );
   \   000069                ; Setup parameters for call to function afRegister
   \   000069   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00006D   12....       LCALL   ??afRegister?relay
    165          
    166            // Register for all key events - This app will handle all key events
    167            RegisterForKeys( SampleApp_TaskID );
   \   000070                ; Setup parameters for call to function RegisterForKeys
   \   000070   90....       MOV     DPTR,#SampleApp_TaskID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   ??RegisterForKeys?relay
    168          
    169            // By default, all devices start out in Group 1
    170            SampleApp_Group.ID = 0x0001;
   \   000078   90....       MOV     DPTR,#SampleApp_Group
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
    171            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000084   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000087   F5..         MOV     ?V0 + 2,A
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   7C07         MOV     R4,#0x7
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000094   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000096   12....       LCALL   ??osal_memcpy?relay
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    172            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00009E                ; Setup parameters for call to function aps_AddGroup
   \   00009E   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A2   7914         MOV     R1,#0x14
   \   0000A4   12....       LCALL   ??aps_AddGroup?relay
    173          
    174          #if defined ( LCD_SUPPORTED )
    175            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000A7                ; Setup parameters for call to function HalLcdWriteString
   \   0000A7   7901         MOV     R1,#0x1
   \   0000A9   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000AB   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000AD   12....       LCALL   ??HalLcdWriteString?relay
    176          #endif
    177          }
   \   0000B0   7F03         MOV     R7,#0x3
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA
    178          
    179          /*********************************************************************
    180           * @fn      SampleApp_ProcessEvent
    181           *
    182           * @brief   Generic Application Task event processor.  This function
    183           *          is called to process all events for the task.  Events
    184           *          include timers, messages and any other user defined events.
    185           *
    186           * @param   task_id  - The OSAL assigned task ID.
    187           * @param   events - events to process.  This is a bit map and can
    188           *                   contain more than one event.
    189           *
    190           * @return  none
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    193          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    194            afIncomingMSGPacket_t *MSGpkt;
    195            (void)task_id;  // Intentionally unreferenced parameter
    196          
    197            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6079         JZ      ??SampleApp_ProcessEvent_0
    198            {
    199              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP    ??SampleApp_ProcessEvent_1
    200              while ( MSGpkt )
    201              {
    202                switch ( MSGpkt->hdr.event )
    203                {
    204                  // Received when a key is pressed
    205                  case KEY_CHANGE:
    206                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    207                    break;
    208          
    209                  // Received when a messages is received (OTA) for this endpoint
    210                  case AF_INCOMING_MSG_CMD:
    211                    SampleApp_MessageMSGCB( MSGpkt );
    212                    break;
    213          
    214                  // Received whenever the device changes state in the network
    215                  case ZDO_STATE_CHANGE:
    216                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    217                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    218                        || (SampleApp_NwkState == DEV_ROUTER)
    219                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL     A,#0x9
   \   000017   600A         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6406         XRL     A,#0x6
   \   000021   7010         JNZ     ??SampleApp_ProcessEvent_4
    220                    {
    221                      // Start sending the periodic message in a regular interval.
    222                      osal_start_timerEx( SampleApp_TaskID,
    223                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    224                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7C88         MOV     R4,#-0x78
   \   000025   7D13         MOV     R5,#0x13
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_start_timerEx?relay
    225                    }
    226                    else
    227                    {
    228                      // Device is no longer in the network
    229                    }
    230                    break;
    231          
    232                  default:
    233                    break;
    234                }
    235          
    236                // Release the memory
    237                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0 + 0
   \   000035   AB..         MOV     R3,?V0 + 1
   \   000037   12....       LCALL   ??osal_msg_deallocate?relay
    238          
    239                // Next - if one is available
    240                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_msg_receive?relay
   \   000042   8A..         MOV     ?V0 + 0,R2
   \   000044   8B..         MOV     ?V0 + 1,R3
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   24E6         ADD     A,#-0x1a
   \   000055   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD     A,#0x5a
   \   000059   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD     A,#-0x11
   \   00005D   60B0         JZ      ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000073   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV     R2,?V0 + 0
   \   000077   AB..         MOV     R3,?V0 + 1
   \   000079   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007C   80B5         SJMP    ??SampleApp_ProcessEvent_4
    241              }
    242          
    243              // return unprocessed events
    244              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000083   FB           MOV     R3,A
   \   000084   802A         SJMP    ??SampleApp_ProcessEvent_9
    245            }
    246          
    247            // Send a message out - This event is generated by a timer
    248            //  (setup in SampleApp_Init()).
    249            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000086   EE           MOV     A,R6
   \   000087   A2E0         MOV     C,0xE0 /* A   */.0
   \   000089   5021         JNC     ??SampleApp_ProcessEvent_10
    250            {
    251              // Send the periodic message
    252              SampleApp_SendPeriodicMessage();
   \   00008B                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008B   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    253          
    254              // Setup to send message again in normal period (+ a little jitter)
    255              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    256                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008E                ; Setup parameters for call to function osal_rand
   \   00008E   12....       LCALL   ??osal_rand?relay
   \   000091                ; Setup parameters for call to function osal_start_timerEx
   \   000091   EA           MOV     A,R2
   \   000092   2488         ADD     A,#-0x78
   \   000094   FC           MOV     R4,A
   \   000095   E4           CLR     A
   \   000096   3413         ADDC    A,#0x13
   \   000098   FD           MOV     R5,A
   \   000099   7A01         MOV     R2,#0x1
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   ??osal_start_timerEx?relay
    257          
    258              // return unprocessed events
    259              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A5   EE           MOV     A,R6
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   80D7         SJMP    ??SampleApp_ProcessEvent_8
    260            }
    261          
    262            // Discard unknown events
    263            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000AC   7A00         MOV     R2,#0x0
   \   0000AE   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000B0   7F04         MOV     R7,#0x4
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA
    264          }
    265          
    266          /*********************************************************************
    267           * Event Generation Functions
    268           */
    269          /*********************************************************************
    270           * @fn      SampleApp_HandleKeys
    271           *
    272           * @brief   Handles all key events for this device.
    273           *
    274           * @param   shift - true if in shift/alt.
    275           * @param   keys - bit field for key events. Valid entries:
    276           *                 HAL_KEY_SW_2
    277           *                 HAL_KEY_SW_1
    278           *
    279           * @return  none
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    282          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    283            (void)shift;  // Intentionally unreferenced parameter
    284            
    285            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    286            {
    287              /* This key sends the Flash Command is sent to Group 1.
    288               * This device will not receive the Flash Command from this
    289               * device (even if it belongs to group 1).
    290               */
    291              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    292            }
    293          
    294            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    295            {
    296              /* The Flashr Command is sent to Group 1.
    297               * This key toggles this device in and out of group 1.
    298               * If this device doesn't belong to group 1, this application
    299               * will not receive the Flash command sent to group 1.
    300               */
    301              aps_Group_t *grp;
    302              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    303              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    304              {
    305                // Remove from the group
    306                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    307              }
    308              else
    309              {
    310                // Add to the flash group
    311                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    312              }
    313            }
    314          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    315          
    316          /*********************************************************************
    317           * LOCAL FUNCTIONS
    318           */
    319          
    320          /*********************************************************************
    321           * @fn      SampleApp_MessageMSGCB
    322           *
    323           * @brief   Data message processor callback.  This function processes
    324           *          any incoming data - probably from other devices.  So, based
    325           *          on cluster ID, perform the intended action.
    326           *
    327           * @param   none
    328           *
    329           * @return  none
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    332          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    333            uint16 flashTime;
    334          
    335            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   703B         JNZ     ??SampleApp_MessageMSGCB_1
    336            {
    337              case SAMPLEAPP_PERIODIC_CLUSTERID:
    338                break;
    339          
    340              case SAMPLEAPP_FLASH_CLUSTERID:
    341                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    342                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV     A,R2
   \   000017   2422         ADD     A,#0x22
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   2400         ADD     A,#0x0
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   F5..         MOV     ?V0 + 1,A
   \   00003D   7402         MOV     A,#0x2
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?US_SHR
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   7B32         MOV     R3,#0x32
   \   00004A   7A04         MOV     R2,#0x4
   \   00004C   7908         MOV     R1,#0x8
   \   00004E   12....       LCALL   ??HalLedBlink?relay
    343                break;
    344            }
    345          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000051   80..         SJMP    ??Subroutine1_0
    346          
    347          /*********************************************************************
    348           * @fn      SampleApp_SendPeriodicMessage
    349           *
    350           * @brief   Send the periodic message.
    351           *
    352           * @param   none
    353           *
    354           * @return  none
    355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine1_0
   \   000003                ; // Fall through to label ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    356          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    357          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    358            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    359                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    360                                 1,
    361                                 (uint8*)&SampleAppPeriodicCounter,
    362                                 &SampleApp_TransID,
    363                                 AF_DISCV_ROUTE,
    364                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    365            {
    366            }
    367            else
    368            {
    369              // Error occurred in request to send.
    370            }
    371          }
    372          
    373          /*********************************************************************
    374           * @fn      SampleApp_SendFlashMessage
    375           *
    376           * @brief   Send the flash message to group 1.
    377           *
    378           * @param   flashTime - in milliseconds
    379           *
    380           * @return  none
    381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    383          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    384            uint8 buffer[3];
    385            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    386            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    387            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    388          
    389            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    390                                 SAMPLEAPP_FLASH_CLUSTERID,
    391                                 3,
    392                                 buffer,
    393                                 &SampleApp_TransID,
    394                                 AF_DISCV_ROUTE,
    395                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    396            {
    397            }
    398            else
    399            {
    400              // Error occurred in request to send.
    401            }
    402          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    
    403          
    404          /*********************************************************************
    405          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> readCoordinatorJumper         0      0     22
       -> ZDOInitDevice                 0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         181
     SampleApp_ProcessEvent                 181
     SampleApp_HandleKeys                    61
     ??Subroutine1_0                          5
     SampleApp_MessageMSGCB                  83
     ?Subroutine0                             3
     SampleApp_SendPeriodicMessage           69
     SampleApp_SendFlashMessage             118
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10

 
 701 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
  34 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 737 bytes of CODE  memory
  34 bytes of CONST memory
  53 bytes of XDATA memory

Errors: none
Warnings: none
